// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Illegal-0]
	_ = x[EOF-1]
	_ = x[Space-2]
	_ = x[Comment-3]
	_ = x[Identifier-4]
	_ = x[String-5]
	_ = x[Number-6]
	_ = x[Semicolon-7]
	_ = x[Comma-8]
	_ = x[LParen-9]
	_ = x[RParen-10]
	_ = x[Typecast-11]
	_ = x[Add-12]
	_ = x[Alter-13]
	_ = x[By-14]
	_ = x[Cache-15]
	_ = x[Column-16]
	_ = x[Constraint-17]
	_ = x[Create-18]
	_ = x[Default-19]
	_ = x[Grant-20]
	_ = x[Increment-21]
	_ = x[Index-22]
	_ = x[Insert-23]
	_ = x[Maxvalue-24]
	_ = x[Minvalue-25]
	_ = x[No-26]
	_ = x[Not-27]
	_ = x[Null-28]
	_ = x[On-29]
	_ = x[Only-30]
	_ = x[Owner-31]
	_ = x[Select-32]
	_ = x[Sequence-33]
	_ = x[Set-34]
	_ = x[Start-35]
	_ = x[Table-36]
	_ = x[To-37]
	_ = x[Update-38]
	_ = x[Using-39]
	_ = x[Varying-40]
	_ = x[With-41]
	_ = x[Bigint-42]
	_ = x[Bigserial-43]
	_ = x[Boolean-44]
	_ = x[Bytea-45]
	_ = x[Character-46]
	_ = x[Date-47]
	_ = x[Integer-48]
	_ = x[Jsonb-49]
	_ = x[Numeric-50]
	_ = x[Serial-51]
	_ = x[Text-52]
	_ = x[Timestamp-53]
	_ = x[Time-54]
	_ = x[Tsvector-55]
}

const _TokenType_name = "IllegalEOFSpaceCommentIdentifierStringNumberSemicolonCommaLParenRParenTypecastAddAlterByCacheColumnConstraintCreateDefaultGrantIncrementIndexInsertMaxvalueMinvalueNoNotNullOnOnlyOwnerSelectSequenceSetStartTableToUpdateUsingVaryingWithBigintBigserialBooleanByteaCharacterDateIntegerJsonbNumericSerialTextTimestampTimeTsvector"

var _TokenType_index = [...]uint16{0, 7, 10, 15, 22, 32, 38, 44, 53, 58, 64, 70, 78, 81, 86, 88, 93, 99, 109, 115, 122, 127, 136, 141, 147, 155, 163, 165, 168, 172, 174, 178, 183, 189, 197, 200, 205, 210, 212, 218, 223, 230, 234, 240, 249, 256, 261, 270, 274, 281, 286, 293, 299, 303, 312, 316, 324}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
